name: Rebase Downstream on Upstream
# This workflow keeps a downstream branch up to date by rebasing it onto an
# upstream branch and opening/updating a PR with the rebased result.
#
# Why rebase?
# - Keeps a linear history on the downstream branch, making it easier to read.
# - Ensures downstream changes are replayed on top of upstream, reducing merge
#   noise.
#
# How it works at a glance:
# 1) Checkout downstream branch with full history (fetch-depth: 0)
# 2) Add and fetch the upstream remote
# 3) Detect if upstream is already contained in downstream; if yes, exit early
# 4) Rebase downstream onto upstream
# 5) Push rebased history to a temporary branch (force-with-lease)
# 6) Create or update a PR from the temporary branch into downstream using GH CLI

on:
  schedule:
    - cron: '0 0 * * *'  
  workflow_dispatch:
    inputs:
      downstream_branch:
        description: Downstream branch to rebase (destination)
        required: false
        default: main
      upstream_branch:
        description: Upstream branch to rebase onto (source)
        required: false
        default: main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  rebase:
    runs-on: ubuntu-latest
    env:
      DOWNSTREAM_BRANCH: ${{ inputs.downstream_branch || 'main' }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch || 'main' }}

    steps:
      # 1️⃣ Checkout downstream repository
      - name: Checkout downstream repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DOWNSTREAM_BRANCH }}
          # Fetch the full commit history so `git rebase` has everything it needs.
          # Shallow clones (fetch-depth: 1) can cause rebase failures or surprises.
          fetch-depth: 0
          # Keep the token available for pushes made later in this workflow.
          persist-credentials: true

      # 2️⃣ Set up Git
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"


      # 3️⃣ Add upstream remote and fetch
      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/briangallagher/test-upstream
          git fetch upstream

      # 4️⃣ Check for upstream changes
      - name: Check for upstream commits
        id: check_upstream
        run: |
          # Determine whether the upstream branch tip is already included in
          # the downstream branch. If yes, we avoid unnecessary rebase.
          git fetch upstream "$UPSTREAM_BRANCH"
          UPSTREAM_COMMIT=$(git rev-parse "upstream/$UPSTREAM_BRANCH")
          LOCAL_COMMIT=$(git rev-parse "$DOWNSTREAM_BRANCH")
          if git merge-base --is-ancestor $UPSTREAM_COMMIT $LOCAL_COMMIT; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
            echo "✅ Already up to date. Nothing to rebase."
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Rebase onto upstream/main if needed
      - name: Rebase onto upstream branch
        if: steps.check_upstream.outputs.up_to_date == 'false'
        id: rebase
        run: |
          git checkout "$DOWNSTREAM_BRANCH"
          if git rebase "upstream/$UPSTREAM_BRANCH"; then
              echo "rebase_status=success" >> $GITHUB_OUTPUT
          else
              git rebase --abort
              echo "rebase_status=failure" >> $GITHUB_OUTPUT
              echo "Rebase attempted and failed."
          fi

      # 6️⃣ Push to temporary branch for PR
      - name: Push rebased branch
        if: steps.check_upstream.outputs.up_to_date == 'false' && steps.rebase.outputs.rebase_status == 'success'
        run: |
          # Push the rebased downstream branch to a temporary branch that will
          # back the pull request. Use force-with-lease for safety to avoid
          # overwriting remote updates made by others unexpectedly.
          git push origin "$DOWNSTREAM_BRANCH":rebase/"${DOWNSTREAM_BRANCH}"-tmp --force-with-lease

      # 7️⃣ Create or update PR for successful rebase
      - name: Create or update PR
        if: steps.check_upstream.outputs.up_to_date == 'false' && steps.rebase.outputs.rebase_status == 'success'
        env:
          # GitHub CLI uses GH_TOKEN for auth; the default token has repo-scoped permissions.
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GitHub CLI to create or update a PR from the temporary branch.
          # This works reliably when the branch was already pushed by earlier steps.
          set -euo pipefail

          HEAD_BRANCH="rebase/${DOWNSTREAM_BRANCH}-tmp"
          BASE_BRANCH="${DOWNSTREAM_BRANCH}"
          TITLE="Rebase ${DOWNSTREAM_BRANCH} onto upstream/${UPSTREAM_BRANCH}"
          BODY="Automatic rebase of downstream ${DOWNSTREAM_BRANCH} onto upstream/${UPSTREAM_BRANCH}."
          LABEL="automated-rebase"

          # Ensure the label exists; if creation fails due to permissions, continue gracefully.
          if ! gh label view "$LABEL" >/dev/null 2>&1; then
            gh label create "$LABEL" --color "0e8a16" --description "Created by automated rebase workflow" || echo "Label create failed; continuing without labeling."
          fi

          # Try to find an existing open PR from HEAD_BRANCH into BASE_BRANCH.
          PR_NUMBER=$(gh pr list \
            --head "$HEAD_BRANCH" \
            --base "$BASE_BRANCH" \
            --state open \
            --json number \
            --jq '.[0].number' || true)

          if [ -n "${PR_NUMBER:-}" ]; then
            echo "PR #$PR_NUMBER exists. Updating title and body, then labeling if possible."
            gh pr edit "$PR_NUMBER" \
              --title "$TITLE" \
              --body "$BODY"
            # Labeling may fail if labels are restricted; do not fail the workflow.
            gh pr edit "$PR_NUMBER" --add-label "$LABEL" || echo "Could not add label '$LABEL'"
          else
            echo "Creating PR from $HEAD_BRANCH to $BASE_BRANCH"
            # Create PR without labels first to avoid failure if label is missing.
            PR_NUMBER=$(gh pr create \
              --base "$BASE_BRANCH" \
              --head "$HEAD_BRANCH" \
              --title "$TITLE" \
              --body "$BODY" \
              --json number \
              --jq .number)
            # Then try to add label; ignore failure.
            gh pr edit "$PR_NUMBER" --add-label "$LABEL" || echo "Could not add label '$LABEL'"
          fi

      # 8️⃣ Fail workflow if rebase failed
      - name: Fail workflow if rebase failed
        if: steps.check_upstream.outputs.up_to_date == 'false' && steps.rebase.outputs.rebase_status == 'failure'
        run: exit 1

