name: Rebase no PR
# This workflow keeps a downstream branch up to date by rebasing it onto an
# upstream branch and opening/updating a PR with the rebased result.
#
# Why rebase?
# - Keeps a linear history on the downstream branch, making it easier to read.
# - Ensures downstream changes are replayed on top of upstream, reducing merge
#   noise.
#
# How it works at a glance:
# 1) Checkout downstream branch with full history (fetch-depth: 0)
# 2) Add and fetch the upstream remote
# 3) Detect if upstream is already contained in downstream; if yes, exit early
# 4) Rebase downstream onto upstream
# 5) Push the rebased history directly to the downstream branch (force-with-lease)

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      downstream_branch:
        description: Downstream branch to rebase (destination)
        required: false
        default: main
      upstream_branch:
        description: Upstream branch to rebase onto (source)
        required: false
        default: main

permissions:
  contents: write

jobs:
  rebase:
    runs-on: ubuntu-latest
    env:
      DOWNSTREAM_BRANCH: ${{ inputs.downstream_branch || 'main' }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch || 'main' }}

    steps:
      # 1️⃣ Checkout downstream repository
      - name: Checkout downstream repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DOWNSTREAM_BRANCH }}
          # Fetch the full commit history so `git rebase` has everything it needs.
          # Shallow clones (fetch-depth: 1) can cause rebase failures or surprises.
          fetch-depth: 0
          # Keep the token available for pushes made later in this workflow.
          persist-credentials: true

      # 2️⃣ Set up Git
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 2.1️⃣ Enable rerere (reuse recorded resolutions)
      # rerere records how you resolve specific conflict hunks, and will
      # automatically re-apply the same resolution the next time the exact
      # conflict occurs. This helps make recurring rebases non-interactive.
      - name: Enable rerere (reuse recorded resolutions)
        run: |
          git config rerere.enabled true
          git config rerere.autoUpdate true

      # 2.2️⃣ Restore rerere cache (persists conflict resolutions across runs)
      - name: Restore rerere cache
        uses: actions/cache/restore@v4
        with:
          path: .git/rr-cache
          key: rerere-${{ github.repository }}-${{ env.DOWNSTREAM_BRANCH }}-${{ env.UPSTREAM_BRANCH }}
          restore-keys: |
            rerere-${{ github.repository }}-${{ env.DOWNSTREAM_BRANCH }}-${{ env.UPSTREAM_BRANCH }}-
            rerere-${{ github.repository }}-

      # 3️⃣ Add upstream remote and fetch
      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/briangallagher/test-upstream
          git fetch upstream

      # 4️⃣ Check for upstream changes
      - name: Check for upstream commits
        id: check_upstream
        run: |
          # Determine whether the upstream branch tip is already included in
          # the downstream branch. If yes, we avoid unnecessary rebase.
          git fetch upstream "$UPSTREAM_BRANCH"
          UPSTREAM_COMMIT=$(git rev-parse "upstream/$UPSTREAM_BRANCH")
          LOCAL_COMMIT=$(git rev-parse "$DOWNSTREAM_BRANCH")
          if git merge-base --is-ancestor $UPSTREAM_COMMIT $LOCAL_COMMIT; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
            echo "✅ Already up to date. Nothing to rebase."
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Rebase onto upstream branch (no strategy fallback)
      - name: Rebase onto upstream branch
        if: steps.check_upstream.outputs.up_to_date == 'false'
        id: rebase
        run: |
          git checkout "$DOWNSTREAM_BRANCH"
          if git rebase "upstream/$UPSTREAM_BRANCH"; then
              echo "rebase_status=success" >> $GITHUB_OUTPUT
          else
              # Print conflicted files for diagnostics
              git diff --name-only --diff-filter=U || true
              git rebase --abort
              echo "rebase_status=failure" >> $GITHUB_OUTPUT
              echo "Rebase attempted and failed."
          fi

      # 5.1️⃣ Ensure rerere cache directory exists before saving
      - name: Ensure rerere cache directory
        if: always()
        run: mkdir -p .git/rr-cache

      # 5.2️⃣ Save rerere cache to speed up future conflict resolutions
      - name: Save rerere cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .git/rr-cache
          key: rerere-${{ github.repository }}-${{ env.DOWNSTREAM_BRANCH }}-${{ env.UPSTREAM_BRANCH }}-${{ github.run_id }}

      # 6️⃣ Push rebased branch directly to downstream (no PR)
      - name: Push rebased branch to downstream
        if: steps.check_upstream.outputs.up_to_date == 'false' && steps.rebase.outputs.rebase_status == 'success'
        run: |
          # Push the rebased downstream branch directly. Use force-with-lease
          # to avoid overwriting unexpected remote updates.
          git push origin "$DOWNSTREAM_BRANCH" --force-with-lease

      # 7️⃣ Fail workflow if rebase failed
      - name: Fail workflow if rebase failed
        if: steps.check_upstream.outputs.up_to_date == 'false' && steps.rebase.outputs.rebase_status == 'failure'
        run: exit 1

